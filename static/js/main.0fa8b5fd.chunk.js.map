{"version":3,"sources":["components/Squares/Squares.jsx","components/SquareSelector/SquareSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["Squares","props","className","selected","SquareSelector","handleChange","event","handleSelect","target","value","onClick","App","square","setState","state","class","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAceA,G,YAXC,SAAAC,GACZ,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAA8B,cAAnBD,EAAME,SAA2B,WAAa,MAA9D,KACA,yBAAKD,UAA8B,cAAnBD,EAAME,SAA2B,WAAa,MAA9D,MACA,yBAAKD,UAA8B,gBAAnBD,EAAME,SAA6B,WAAa,MAAhE,OACA,yBAAKD,UAA8B,eAAnBD,EAAME,SAA4B,WAAa,MAA/D,SC6BGC,G,MAlCQ,SAAAH,GAEnB,IAAMI,EAAe,SAAAC,GACjBL,EAAMM,aAAaD,EAAME,OAAOC,QAGpC,GAAIR,EAAME,SAEV,OACI,yBAAKD,UAAU,kBACX,4BACIA,UAA8B,cAAnBD,EAAME,SAA2B,WAAa,GACzDM,MAAM,YACNC,QAASL,GAAkC,cAAnBJ,EAAME,SAA2B,oBAAsB,mBAEnF,4BACID,UAA8B,cAAnBD,EAAME,SAA2B,WAAa,GACzDM,MAAM,YACNC,QAASL,GAAkC,cAAnBJ,EAAME,SAA2B,qBAAuB,oBAEpF,4BACID,UAA8B,gBAAnBD,EAAME,SAA6B,WAAa,GAC3DM,MAAM,cACNC,QAASL,GAAkC,gBAAnBJ,EAAME,SAA6B,sBAAwB,qBAEvF,4BACID,UAA8B,YAAnBD,EAAME,SAAyB,WAAa,GACvDM,MAAM,aACNC,QAASL,GAAkC,YAAnBJ,EAAME,SAAyB,qBAAuB,uBCQ/EQ,E,kDAhCb,aAAe,IAAD,8BACV,gBAMJJ,aAAe,SAACK,GACd,EAAKC,SAAS,CACZV,SAAUS,KAPV,EAAKE,MAAM,CACTX,SAAU,aAHF,E,qDAcZ,OACE,yBAAKD,UAAU,OACb,4BAAQA,UAAU,cAAlB,6BAAyD,0CAAzD,oBACA,gDAAqB,0BAAMa,MAAM,QAAZ,UAArB,mEACA,8BACA,kBAAC,EAAD,CACIZ,SAAUa,KAAKF,MAAMX,SACrBI,aAAcS,KAAKT,eAErB,kBAAC,EAAD,CACEJ,SAAUa,KAAKF,MAAMX,iB,GAzBfc,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0fa8b5fd.chunk.js","sourcesContent":["import React from 'react';\nimport './Squares.css';\n\nconst Squares = props => {\n    return(\n        <div className=\"Squares\">\n            <div className={props.selected === 'squareOne' ? 'selected' : null}>I</div>\n            <div className={props.selected === 'squareTwo' ? 'selected' : null}>II</div>\n            <div className={props.selected === 'squareThree' ? 'selected' : null}>III</div>\n            <div className={props.selected === 'squareFour' ? 'selected' : null}>IV</div>\n        </div>\n    );\n}\n\nexport default Squares;","\nimport React from 'react'\nimport './SquareSelector.css'\n\nconst SquareSelector = props => {\n    \n    const handleChange = event => {\n        props.handleSelect(event.target.value)\n      }\n\n    if (props.selected)\n\n    return(\n        <div className='SquareSelector' >\n            <button \n                className={props.selected === 'squareOne' ? 'selected' : ''} \n                value='squareOne' \n                onClick={handleChange}>{props.selected === 'squareOne' ? 'Square I Selected' : 'Select Square I' }\n            </button>\n            <button \n                className={props.selected === 'squareTwo' ? 'selected' : ''} \n                value='squareTwo' \n                onClick={handleChange}>{props.selected === 'squareTwo' ? 'Square II Selected' : 'Select Square II' }\n            </button>\n            <button \n                className={props.selected === 'squareThree' ? 'selected' : ''} \n                value='squareThree' \n                onClick={handleChange}>{props.selected === 'squareThree' ? 'Square III Selected' : 'Select Square III' }\n            </button>\n            <button \n                className={props.selected === 'square4' ? 'selected' : ''} \n                value='squareFour' \n                onClick={handleChange}>{props.selected === 'square4' ? 'Square IV Selected' : 'Select Square IV' }\n            </button>\n        </div>\n    )\n}\n\nexport default SquareSelector","import React, { Component } from 'react';\nimport './App.css';\n// Import components\nimport Squares from './components/Squares/Squares'\nimport SquareSelector from './components/SquareSelector/SquareSelector';\n\n\nclass App extends Component {\n  constructor() {\n      super()\n      this.state={\n        selected: 'squareOne'\n      }\n    }\n\n  handleSelect = (square) => {\n    this.setState({\n      selected: square\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT - <strike>CIRCLE</strike> SQUARE SELECTOR</header>\n        <p>THANK YOU FOR ALL <span class=\"love\">&#x2764;</span> JIM CLARK, JIM HAFF, CHRIS OGILVY, SHAW KITAJIMA & TARA FENTON</p>\n        <main>\n        <SquareSelector\n            selected={this.state.selected}\n            handleSelect={this.handleSelect}\n          />\n          <Squares\n            selected={this.state.selected}\n          />\n        </main>        \n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}